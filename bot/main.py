import logging
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, ConversationHandler
from bot.handlers import (
    start, age_verification, get_name, get_age,
    show_routes, route_selected, confirm_participation, handle_photo
)
from bot.utils.constants import (
    AGE_VERIFICATION, NAME, AGE, ROUTE_SELECTION, PHOTO_UPLOAD
)
from config import Config
from admin_panel.app import app as admin_app
import threading
from flask import Flask
from telegram import Bot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    updater = Updater(Config.TOKEN)
    dispatcher = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            AGE_VERIFICATION: [CallbackQueryHandler(age_verification)],
            NAME: [MessageHandler(Filters.text & ~Filters.command, get_name)],
            AGE: [MessageHandler(Filters.text & ~Filters.command, get_age)],
            ROUTE_SELECTION: [CallbackQueryHandler(route_selected)],
            PHOTO_UPLOAD: [
                MessageHandler(Filters.photo, handle_photo),
                CommandHandler('start', start)
            ],
        },
        fallbacks=[CommandHandler('start', start)],
    )

    dispatcher.add_handler(conv_handler)

    # –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é
    def setup_main_menu():
        from telegram import ReplyKeyboardMarkup
        menu_options = [
            ['üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö'],
            ['üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞'],
            ['‚Ñπ –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ']
        ]
        reply_markup = ReplyKeyboardMarkup(menu_options, resize_keyboard=True)

        def show_menu(update: Update, context: CallbackContext):
            update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
                reply_markup=reply_markup
            )

        dispatcher.add_handler(MessageHandler(Filters.regex('^üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö$'), show_routes))
        dispatcher.add_handler(MessageHandler(Filters.regex('^üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞$'), 
                                lambda u,c: u.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ —Å –æ—Ç–º–µ—Ç–∫–æ–π –±–∞—Ä–∞.")))
        dispatcher.add_handler(MessageHandler(Filters.regex('^‚Ñπ –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ$'), 
                                lambda u,c: u.message.reply_text("–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://example.com")))

    setup_main_menu()

    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–≤–µ–±—Ö—É–∫ –∏–ª–∏ –ø–æ–ª–ª–∏–Ω–≥)
    if Config.WEBHOOK_MODE:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
        updater.start_webhook(
            listen="0.0.0.0",
            port=Config.PORT,
            url_path=Config.TOKEN,
            webhook_url=f"{Config.WEBHOOK_URL}/{Config.TOKEN}"
        )
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞")
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª–ª–∏–Ω–≥
        updater.start_polling()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞")

    updater.idle()

def run_admin():
    """–ó–∞–ø—É—Å–∫ Flask –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    admin_app.run(host='0.0.0.0', port=Config.ADMIN_PORT, debug=False)

def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    bot_thread = threading.Thread(target=run_bot)
    admin_thread = threading.Thread(target=run_admin)

    bot_thread.start()
    admin_thread.start()

    bot_thread.join()
    admin_thread.join()

if __name__ == '__main__':
    main()